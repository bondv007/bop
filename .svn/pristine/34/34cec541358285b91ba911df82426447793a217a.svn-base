<?php 

App::uses('Controller', 'Controller');

/**
 * Affiliate Controller
 *
 * Purpose : Manage Affiliate
 * @project Creators Exchange
 * @since 4 June 2014
 * @version Cake Php 2.3.8
 * @author : Vivek Sharma
 */
 
class AffiliateController extends AppController 
{
	public $name = 'Affiliate';
	public $components = array('RequestHandler');
	public $helpers = array('Html', 'Form', 'Js');
	public $uses = array('User','AffiliateProfile','Region','Coach','Athlete','Badge');
	
	public function beforeFilter()
	{		
		parent::beforeFilter();	
		$this->Auth->allow(array('accept_coach_invite','decline_coach_invite','accept_athlete_invite','decline_athlete_invite'));	
	}
	
	
	/**
	 * Method Name : manage_profile	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : used to manage affiliate profile
	 */
	 public function manage_profile()
	 {
		if ( !empty($this->request->data) )
		{	
			$data = $this->data;
			
			if ( empty($data['AffiliateProfile']['id']) )
			{
				$this->AffiliateProfile->create();	
			
			} else {
				
				$data['AffiliateProfile']['last_modified'] = date('Y-m-d H:i:s');
				$this->AffiliateProfile->id = $data['AffiliateProfile']['id'];
			}
						
			$this->AffiliateProfile->save($data['AffiliateProfile']);
			
			if ( empty($data['User']['photo']) || empty($data['User']['photo']['tmp_name']) || $data['User']['photo']['size'] > 0)
			{
				unset($data['User']['photo']);	
			}
			
			$this->User->id = $data['User']['id'];
			$this->User->save($data['User']);
			
			$this->redirect(array('controller' => 'users', 'action' => 'profile'));
									
		} 		 
		 
		$user_id = $this->Auth->user('id');
	
		$this->User->bindModel(array('hasOne' => array('AffiliateProfile' => array('className' => 'AffiliateProfile', 'foreignKey' => 'user_id'))));
		$user = $this->User->find('first', array('conditions' => array('User.id' => $user_id)));		
	
		$coaches = $regions = array();		
		
		$this->Coach->bindModel(array('belongsTo' => array('User' => array('className' => 'User', 'foreignKey' => 'user_id'))));
		$allcoaches = $this->Coach->find('all',array('conditions' => array('Coach.affiliate_id' => $user_id)));
		
		if ( !empty($allcoaches) )
		{
			foreach($allcoaches as $ach)
			{
				$coaches[$ach['Coach']['id']] = $ach['User']['first_name'].' '.$ach['User']['last_name'];	
			}	
		}		
		
		$regions = $this->Region->find('list',array('order' => array('Region.name' => 'asc')));
		
		$this->request->data = $user; 
		$this->set('regions', $regions);
		$this->set('coaches',$coaches);				
		$this->set('user', $user);	
		
		$this->render('manage_profile');				
					
	 }	 
	 
	 
	 /**
	 * Method Name : manage_coaches	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : used to manage coaches
	 */
	 public function manage_coaches()
	 {
		
		$this->paginate = array(
							'conditions' => array('Coach.affiliate_id' => $this->Auth->user('id')),
							'limit' => '20',
							'order' => array('Athlete.first_name' => 'asc')
							
						);
		
		$coaches = $this->paginate('Coach');
		$this->set('coaches', $coaches);
		$this->render('manage_coaches');
	 }
	 
	 
	 /**
	 * Method Name : add_coach	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : used to add new coaches
	 */
	 public function add_coach()
	 {
		if ( !empty($this->request->data) )
		{
			$data = $this->data;
			//pr($data);die;
			
			$already = $this->Coach->find('all', array('conditions' => array('Coach.email' => $data['Coach']['email'],
																				'Coach.affiliate_id' => $data['Coach']['affiliate_id'])));
																				
			//pr($already); die;																		
			
			if ( empty($already) )
			{				
				$user_already = $this->User->find('first',array('conditions'=>array('User.email'=>$data['Coach']['email']),
																'fields' => array('User.id','User.email')));
				if ( !empty($user_already) )
				{
					$data['Coach']['user_id'] = $user_already['User']['id'];
				
				}
				
				$data['Coach']['status'] = 'Pending';
				$data['Coach']['token'] = String::uuid();

				$this->Coach->create();
				$coach = $this->Coach->save($data);
				
				$affiliate_name = $this->Auth->user('first_name');	
				
				/* Send email to user */
				$this->loadModel('Emailtemplate');
				$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'Invite_gameon_coach')));
				$content = $email_content['Emailtemplate']['content'];
				$accept_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'accept_coach_invite', $coach['Coach']['token']), true).'">Click here </a>';
				$decline_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'decline_coach_invite', $coach['Coach']['token']), true).'">Click here </a>';
				
				$content = str_replace(array('{USERNAME}', '{ACCEPT_LINK}', '{DECLINE_LINK}', '{AFFILIATE}'), array(ucfirst($coach['Coach']['first_name']),$accept_url, $decline_url, $affiliate_name), $content);
				$email_content['Emailtemplate']['content'] = $content;
				
				$email = new CakeEmail('smtp');
				$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
					->to($coach['Coach']['email'])
					->emailFormat('html')
					->subject($email_content['Emailtemplate']['subject'])
					->send($content);	
					
				$this->Session->setFlash(__('An invitation has been sent to user. You will be informed if he/she accepts your invitation for coach.'));
				//$this->redirect(array('action' => 'manage_coaches'));	
				
			} else {
				
				$this->Session->setFlash(__('You have already invited/added this user as coach earlier.'),'default',array(),'error');
				
			}																	
				
		}
		
		$this->set('affiliate_id',$this->Auth->user('id'));
		$this->render('add_coach');	
	 }
	 
	 /**
	 * Method Name : get_users_for_coach	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : used to get users to invite as coach
	 */
	 public function get_users_for_coach()
	 {
		$key = $this->request->query['term']; 
		
		$allusers = $this->User->find('all',array('conditions' => array('OR' => array('User.first_name LIKE ' => '%'.$key.'%', 'User.last_name LIKE ' => '%'.$key.'%'),'User.user_type IN ' => array('affiliate','coach','athlete'),'User.status' => '1'),
												'fields' => array('User.id','User.first_name','User.last_name','User.photo')));
		
		$users = array(); $i=0;
		
		foreach($allusers as $us)
		{
			$users[$i]['label'] = $us['User']['first_name'].' '.$us['User']['last_name'];
			$users[$i]['value'] = $us['User']['id'];
			
			$users[$i]['photo'] = $us['User']['photo'];	
			$i++;
		}
		echo json_encode($users);	die;
	 }
	 
	 
	 /**
	 * Method Name : invite_user	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : used to send invitation mail to GameOn user to connect as coach
	 */
	 
	 public function invite_user()
	 {
		$user = $this->User->findById($this->data['id']);
		
		if (!empty($user) )
		{
			$already = $this->Coach->find('first',array('conditions'=>array('Coach.user_id'=>$user['User']['id'],
																			'Coach.affiliate_id' => $this->Auth->user('id'))));
																			
			if ( empty($already) )
			{
				$affiliate_name = $this->Auth->user('first_name');		
			
				$arr = array(
						'user_id' => $user['User']['id'],
						'affiliate_id' => $this->Auth->user('id'),
						'first_name' => $user['User']['first_name'],
						'last_name' => $user['User']['last_name'],
						'email' => $user['User']['email'],
						'photo' => $user['User']['photo'],
						'profile_link' => Router::url('/', true).'/coach/profile/'.$user['User']['id'],
						'status' => 'Pending',
						'token' => String::uuid()
						
					);
				
				$this->Coach->create();
				$coach = $this->Coach->save($arr);
				
				/* Send email to user */
				$this->loadModel('Emailtemplate');
				$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'Invite_gameon_coach')));
				$content = $email_content['Emailtemplate']['content'];
				$accept_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'accept_coach_invite', $coach['Coach']['token']), true).'">Click here </a>';
				$decline_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'decline_coach_invite', $coach['Coach']['token']), true).'">Click here </a>';
				
				$content = str_replace(array('{USERNAME}', '{ACCEPT_LINK}', '{DECLINE_LINK}', '{AFFILIATE}'), array(ucfirst($user['User']['first_name']),$accept_url, $decline_url, $affiliate_name), $content);
				$email_content['Emailtemplate']['content'] = $content;
				
				$email = new CakeEmail('smtp');
				$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
					->to($coach['Coach']['email'])
					->emailFormat('html')
					->subject($email_content['Emailtemplate']['subject'])
					->send($content);	
					
				echo 'success|An invitation has been sent to user. You will be informed if he/she accepts your invitation for coach.';
				
			} else {
				
				echo 'error|You have already invited/added this user as coach earlier.';
				
			}		
				
		}	
		die;
	 }
	 
	 
	 /**
	 * Method Name : accept_coach_invite	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : accept coach invitation
	 */
	 public function accept_coach_invite($key='')
	 {
		if ( !empty($key) )
		{
			$coach = $this->Coach->find('first',array('conditions' => array('Coach.token' => $key)));
			
			if ( !empty($coach) )
			{
				if ( $coach['Coach']['status'] == 'Pending' )
				{
					$this->Coach->id = $coach['Coach']['id'];
					$this->Coach->save(array('status' => 'Approved'));	
					
					$affiliate = $this->User->findById($coach['Coach']['affiliate_id'],array('first_name','last_name','email'));
					
					/* Send email to user */
					$this->loadModel('Emailtemplate');
					$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'response_coach_invitation')));
					$content = $email_content['Emailtemplate']['content'];
					
					$content = str_replace(array('{USERNAME}', '{COACH}', '{RESPONSE}'), array(ucfirst($affiliate['User']['first_name']), $coach['Coach']['first_name']. ' ' . $coach['Coach']['last_name'], 'accepted' ), $content);
					$email_content['Emailtemplate']['content'] = $content;
					
					$email = new CakeEmail('smtp');
					$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
						->to($affiliate['User']['email'])
						->emailFormat('html')
						->subject($email_content['Emailtemplate']['subject'])
						->send($content);
						
					$user = $this->User->find('first',array('conditions'=>array('User.email'=>$coach['Coach']['email'])));
					
					if ( empty($user) )
					{
						$arr = array(); 	
						$arr['User'] = $coach['Coach'];
						$password = mt_rand(10000000, 999999999);
						
						$arr['User']['password'] = $this->Auth->password($password);
						$arr['User']['user_type'] = 'coach';
						$arr['User']['role'] = 'user';
						$arr['User']['status'] = 1;
						$arr['User']['created'] = $arr['modified'] = date('Y-m-d H:i:s');
						
						
						$this->User->create();
						$user = $this->User->save($arr);
						
									
						/* Send email to user */
						
						$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'Registration_details')));
						$content = $email_content['Emailtemplate']['content'];
						$content = str_replace(array('{USERNAME}','{EMAIL}','{PASSWORD}'), array(ucfirst($user['User']['first_name']),$user['User']['email'],$password), $content);
						$email_content['Emailtemplate']['content'] = $content;
						
						//~ die;
						$user_email = new CakeEmail('smtp');
						
						
						$user_email->from(array (ADMIN_EMAIL => APPLICATION_NAME));
						$user_email->to($user['User']['email']);
						$user_email->emailFormat('html');
						$user_email->subject($email_content['Emailtemplate']['subject']);
						$user_email->send($content);				
						
					}
					
					$user_id = $user['User']['id'];
					//Update user id in athlete table 
					$this->Coach->id = $coach['Coach']['id'];
					$this->Coach->save(array('user_id'=>$user_id));
					
					
					$message = 'approved';
					
				} else {
					
					$message = 'already';						
				}
			} else {
				$message = 'invalid';	
			}	
		} else {
			$message = 'invalid';	
		}	
		
		$this->set('message',$message);
		$this->set('type','coach');
		$this->render('invitation_response_page');
	 }
	 
	 /**
	 * Method Name : decline_coach_invite	 
	 * Author Name : Vivek Sharma
	 * Date : 4 June 2014
	 * Description : accept coach invitation
	 */
	 public function decline_coach_invite($key='')
	 {
		if ( !empty($key) )
		{
			$coach = $this->Coach->find('first',array('conditions' => array('Coach.token' => $key)));
			
			if ( !empty($coach) )
			{
				if ( $coach['Coach']['status'] != 'Pending' )
				{
					$this->Coach->id = $coach['Coach']['id'];
					$this->Coach->save(array('status' => 'Approved'));	
					
					$affiliate = $this->User->findById($coach['Coach']['affiliate_id'],array('first_name','last_name','email'));
					
					/* Send email to user */
					$this->loadModel('Emailtemplate');
					$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'response_coach_invitation')));
					$content = $email_content['Emailtemplate']['content'];
					
					$content = str_replace(array('{USERNAME}', '{COACH}', '{RESPONSE}'), array(ucfirst($affiliate['User']['first_name']), $coach['Coach']['first_name']. ' ' . $coach['Coach']['last_name'], 'declined' ), $content);
					$email_content['Emailtemplate']['content'] = $content;
					
					$email = new CakeEmail('smtp');
					$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
						->to($affiliate['User']['email'])
						->emailFormat('html')
						->subject($email_content['Emailtemplate']['subject'])
						->send($content);
					
					
					$message = 'declined';
					
				} else {
					
					$message = 'already';						
				}
			} else {
				$message = 'invalid';	
			}	
		} else {
			$message = 'invalid';	
		}	
		
		$this->set('message',$message);
		$this->set('type','coach');
		$this->render('invitation_response_page');
		
	 }
	 
	 
	 
	 /**
	 * Method Name : manage_athletes	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : used to manage coaches
	 */
	 public function manage_athletes()
	 {
		
		$this->paginate = array(
							'conditions' => array('Athlete.affiliate_id' => $this->Auth->user('id')),
							'limit' => '20',
							'order' => array('Athlete.first_name' => 'asc')
							
						);
		
		$athletes = $this->paginate('Athlete');
		$this->set('athletes', $athletes);
		$this->render('manage_athletes');
	 } 
	 
	 /**
	 * Method Name : add_athlete	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : used to connect with athletes
	 */
	 public function add_athlete()
	 {
		if ( !empty($this->request->data) )
		{
			$data = $this->data;
			//pr($data);die;
			
			$already = $this->Athlete->find('all', array('conditions' => array('Athlete.email' => $data['Athlete']['email'],
																				'Athlete.affiliate_id' => $data['Athlete']['affiliate_id'])));
																				
			//pr($already); die;																		
			
			if ( empty($already) )
			{				
				$user_already = $this->User->find('first',array('conditions'=>array('User.email'=>$data['Athlete']['email']),
																'fields' => array('User.id','User.email')));
				if ( !empty($user_already) )
				{
					$data['Athlete']['user_id'] = $user_already['User']['id'];
				
				}
				
				$data['Athlete']['status'] = 'Pending';
				$data['Athlete']['token'] = String::uuid();

				$this->Athlete->create();
				$athlete = $this->Athlete->save($data);
				
				$affiliate_name = $this->Auth->user('first_name');	
				
				/* Send email to user */
				$this->loadModel('Emailtemplate');
				$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'Invite_gameon_athlete')));
				$content = $email_content['Emailtemplate']['content'];
				$accept_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'accept_athlete_invite', $athlete['Athlete']['token']), true).'">Click here </a>';
				$decline_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'decline_athlete_invite', $athlete['Athlete']['token']), true).'">Click here </a>';
				
				$content = str_replace(array('{USERNAME}', '{ACCEPT_LINK}', '{DECLINE_LINK}', '{AFFILIATE}'), array(ucfirst($athlete['Athlete']['first_name']),$accept_url, $decline_url, $affiliate_name), $content);
				$email_content['Emailtemplate']['content'] = $content;
				
				$email = new CakeEmail('smtp');
				$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
					->to($athlete['Athlete']['email'])
					->emailFormat('html')
					->subject($email_content['Emailtemplate']['subject'])
					->send($content);	
					
				$this->Session->setFlash(__('An invitation has been sent to user. You will be informed if he/she accepts your invitation to connect as athlete.'));
				//$this->redirect(array('action' => 'manage_coaches'));	
				
			} else {
				
				$this->Session->setFlash(__('You have already invited/added this user as athlete earlier.'),'default',array(),'error');
				
			}																	
				
		}

		$this->paginate = array('limit'=>'5');

		$users = $this->paginate('User');
		$this->set('users',$users);
		$this->set('affiliate_id',$this->Auth->user('id'));
		$this->render('add_athlete');	
	 }
	
	/**
	 * Method Name : add_new_athlete	 
	 * Author Name : Vivek Sharma
	 * Date : 10 June 2014
	 * Description : used to add and connect with new athlete
	 */
	 public function add_new_athlete()
	 {
	 	$this->set('affiliate_id',$this->Auth->user('id'));
	 }	
	
	
	
	/**
	 * Method Name : get_users_for_athlete	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : used to get users to invite as athlete
	 */
	 public function get_users_for_athletes()
	 {
		$key = $this->request->query['term']; 
		
		$allusers = $this->User->find('all',array('conditions' => array('OR' => array('User.first_name LIKE ' => '%'.$key.'%', 'User.last_name LIKE ' => '%'.$key.'%'),'User.user_type IN ' => array('affiliate','coach','athlete'),'User.status' => '1'),
												'fields' => array('User.id','User.first_name','User.last_name','User.photo')));
		
		$users = array(); $i=0;
		
		foreach($allusers as $us)
		{
			$users[$i]['label'] = $us['User']['first_name'].' '.$us['User']['last_name'];
			$users[$i]['value'] = $us['User']['id'];
			
			$users[$i]['photo'] = $us['User']['photo'];	
			$i++;
		}
		echo json_encode($users);	die;
	 }
	 
	 
	 /**
	 * Method Name : invite_athlete	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : used to send invitation mail to GameOn user to connect as coach
	 */
	 
	 public function invite_athlete()
	 {
		$user = $this->User->findById($this->data['id']);
		
		if (!empty($user) )
		{
			$already = $this->Athlete->find('first',array('conditions'=>array('Athlete.user_id'=>$user['User']['id'],
																			'Athlete.affiliate_id' => $this->Auth->user('id'))));
																			
			if ( empty($already) )
			{
				$affiliate_name = $this->Auth->user('first_name');		
			
				$arr = array(
						'user_id' => $user['User']['id'],
						'affiliate_id' => $this->Auth->user('id'),
						'first_name' => $user['User']['first_name'],
						'last_name' => $user['User']['last_name'],
						'email' => $user['User']['email'],
						'photo' => $user['User']['photo'],
						'profile_link' => Router::url('/', true).'/athlete/profile/'.$user['User']['id'],
						'status' => 'Pending',
						'token' => String::uuid()
						
					);
				
				$this->Athlete->create();
				$athlete = $this->Athlete->save($arr);
				
				/* Send email to user */
				$this->loadModel('Emailtemplate');
				$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'Invite_gameon_athlete')));
				$content = $email_content['Emailtemplate']['content'];
				$accept_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'accept_athlete_invite', $coach['Coach']['token']), true).'">Click here </a>';
				$decline_url = '<a href="'.Router::url(array('controller' => 'affiliate', 'action' => 'decline_athlete_invite', $coach['Coach']['token']), true).'">Click here </a>';
				
				$content = str_replace(array('{USERNAME}', '{ACCEPT_LINK}', '{DECLINE_LINK}', '{AFFILIATE}'), array(ucfirst($user['User']['first_name']),$accept_url, $decline_url, $affiliate_name), $content);
				$email_content['Emailtemplate']['content'] = $content;
				
				$email = new CakeEmail('smtp');
				$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
					->to($athlete['Athlete']['email'])
					->emailFormat('html')
					->subject($email_content['Emailtemplate']['subject'])
					->send($content);	
					
				echo 'success|An invitation has been sent to user. You will be informed if he/she accepts your invitation to connect as athlete.';
				
			} else {
				
				echo 'error|You have already invited/added this user to connect as athlete earlier.';
				
			}		
				
		}	
		die;
	 }
	 
	 
	 /**
	 * Method Name : accept_athlete_invite	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : accept athlete invitation
	 */
	 public function accept_athlete_invite($key='')
	 {
		if ( !empty($key) )
		{
			$athlete = $this->Athlete->find('first',array('conditions' => array('Athlete.token' => $key)));
			
			if ( !empty($athlete) )
			{
				if ( $athlete['Athlete']['status'] == 'Pending' )
				{
					$this->Athlete->id = $athlete['Athlete']['id'];
					$this->Athlete->save(array('status' => 'Approved'));	
					
					$affiliate = $this->User->findById($athlete['Athlete']['affiliate_id'],array('first_name','last_name','email'));
					
					/* Send email to user */
					$this->loadModel('Emailtemplate');
					$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'response_athlete_invitation')));
					$content = $email_content['Emailtemplate']['content'];
					
					$content = str_replace(array('{USERNAME}', '{ATHLETE}', '{RESPONSE}'), array(ucfirst($affiliate['User']['first_name']), $athlete['Athlete']['first_name']. ' ' . $athlete['Athlete']['last_name'], 'accepted' ), $content);
					$email_content['Emailtemplate']['content'] = $content;
					
					$email = new CakeEmail('smtp');
					$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
						->to($affiliate['User']['email'])
						->emailFormat('html')
						->subject($email_content['Emailtemplate']['subject'])
						->send($content);
						
					$user = $this->User->find('first',array('conditions'=>array('User.email'=>$athlete['Athlete']['email'])));
					
					if ( empty($user) )
					{
						$arr = array(); 	
						$arr['User'] = $athlete['Athlete'];
						$password = mt_rand(10000000, 999999999);
						
						$arr['User']['password'] = $this->Auth->password($password);
						$arr['User']['user_type'] = 'athlete';
						$arr['User']['role'] = 'user';
						$arr['User']['status'] = 1;
						$arr['User']['created'] = $arr['modified'] = date('Y-m-d H:i:s');
						
						
						$this->User->create();
						$user = $this->User->save($arr);
						
									
						/* Send email to user */
						
						$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'Registration_details')));
						$content = $email_content['Emailtemplate']['content'];
						$content = str_replace(array('{USERNAME}','{EMAIL}','{PASSWORD}'), array(ucfirst($user['User']['first_name']),$user['User']['email'],$password), $content);
						$email_content['Emailtemplate']['content'] = $content;
						
						//~ die;
						$user_email = new CakeEmail('smtp');
						
						
						$user_email->from(array (ADMIN_EMAIL => APPLICATION_NAME));
						$user_email->to($user['User']['email']);
						$user_email->emailFormat('html');
						$user_email->subject($email_content['Emailtemplate']['subject']);
						$user_email->send($content);				
						
					}
					
					$user_id = $user['User']['id'];
					//Update user id in athlete table 
					$this->Athlete->id = $athlete['Athlete']['id'];
					$this->Athlete->save(array('user_id'=>$user_id));
					
					$message = 'approved';
					
				} else {
					
					$message = 'already';						
				}
			} else {
				$message = 'invalid';	
			}	
		} else {
			$message = 'invalid';	
		}	
		
		$this->set('message',$message);
		$this->set('type','athlete');
		$this->render('invitation_response_page');
	 }
	 
	 /**
	 * Method Name : decline_athlete_invite	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : accept athlete invitation
	 */
	 public function decline_athlete_invite($key='')
	 {
		if ( !empty($key) )
		{
			$athlete = $this->Athlete->find('first',array('conditions' => array('Athlete.token' => $key)));
			
			if ( !empty($athlete) )
			{
				if ( $athlete['Athlete']['status'] != 'Pending' )
				{
					$this->Athlete->id = $athlete['Athlete']['id'];
					$this->Athlete->save(array('status' => 'Approved'));	
					
					$affiliate = $this->User->findById($athlete['Athlete']['affiliate_id'],array('first_name','last_name','email'));
					
					/* Send email to user */
					$this->loadModel('Emailtemplate');
					$email_content = $this->Emailtemplate->find('first', array('fields' => array('from_name', 'from_email', 'reply_to', 'subject', 'content'), 'conditions' => array('email_for' => 'response_athlete_invitation')));
					$content = $email_content['Emailtemplate']['content'];
					
					$content = str_replace(array('{USERNAME}', '{ATHLETE}', '{RESPONSE}'), array(ucfirst($affiliate['User']['first_name']), $athlete['Athlete']['first_name']. ' ' . $athlete['Athlete']['last_name'], 'declined' ), $content);
					$email_content['Emailtemplate']['content'] = $content;
					
					$email = new CakeEmail('smtp');
					$email->from(array (ADMIN_EMAIL => APPLICATION_NAME))
						->to($affiliate['User']['email'])
						->emailFormat('html')
						->subject($email_content['Emailtemplate']['subject'])
						->send($content);
					
					
					$message = 'declined';
					
				} else {
					
					$message = 'already';						
				}
			} else {
				$message = 'invalid';	
			}	
		} else {
			$message = 'invalid';	
		}	
		
		$this->set('message',$message);
		$this->set('type','coach');
		$this->render('invitation_response_page');
		
	 }

	
	 /**
	 * Method Name : manage_badges	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : used to manage badges
	 */
	 public function manage_badges()
	 {
		
		$this->paginate = array(
							'conditions' => array('Badge.user_id' => $this->Auth->user('id')),
							'limit' => '20'							
						);
		
		$badges = $this->paginate('Badge');
		$this->set('badges', $badges);
		$this->render('manage_badges');
	 } 
	 
	 /**
	 * Method Name : add_badge	 
	 * Author Name : Vivek Sharma
	 * Date : 9 June 2014
	 * Description : used to add a new badge
	 */
	 public function add_badge()
	 {
	 	if ( !empty($this->request->data) )
		{
			$this->Badge->create();
			if($badge = $this->Badge->save($this->data))
			{
				$this->Session->setFlash(__('New Badge saved.'),'default',array(),'success');
			}else{
				$this->Session->setFlash(__('Badge not saved.'),'default',array(),'error');
			}		
		}
	 	$this->set('user_id',$this->Auth->user('id'));
	 	$this->render('add_badge');
	 }
	 
}	 
